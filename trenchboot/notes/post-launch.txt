General Notes:
---------------------------------------------------------------------

Questions:
 - What boot params do we need to deal with in tb_stub?
   * TODO
 - Memory map - pass as e820 in boot params (looks like EFI stub stuff just
   turns mem map into e820 on EFI boot)?
   * WRONG The GRUB loaders will have to setup the e820 using the final EFI memmap.
   * Actually the EFI memmap is passed via boot params and Linux handles it.
 - How/where to handle and measure cmdlines for other boot modules?
   * This will happen in the IL security environment before next stages are
     booted.
   * Using the concept of a custom XBI passed by the GRUB loader that has
     all the information for booting the real OS.
 - How to pass other modules to IL?
   * This will be done in the custom XBI.
   * Now called the IL Boot Protocol struct.
 - Where to measure other modules?
   * This will be done in the IL security environment (u-root).
 - What to do about Runtime Services (not really booting EFI)?
   * TODO
 - TXT: What about the shared page?
   * TODO (probably just goes away).
 - TXT: What about S3 hooks?
   * TODO (kicking this can down the road for now).
 - TXT: What are we passing in the OS-MLE data?
   * Location of the Zero Page.
   * TODO (this will become known as we go).
 - SKINIT: What post launch things need to be checked?
 - TXT: Restoring the LAPIC address, do we need to do this?
   * TODO (so far it looks painful and hacky to do).
 - NMI: Perhaps delaying enabling until after the IDT is in place?
   * If we get an NMI it is game over anyway. Just enable early as we are doing.
   * STGI on BSP done in early tb_stub. STGI on APs done in rmpiggy TB stub
 - MCE: Enabling.
   * The kernel takes care of is, do nothing.
 - early_ioremap: some things to consider.
   * Do we need to make more room in the early fixmap?
   * Can we map less TXT reg pages?
   * Should the SMP code use early or late remap?

Stages:
---------------------------------------------------------------------

This seems like the stages of Trenchboot in the IL starting with the
earliest:

0. Build time:
  - Built tool reads ZO_tb_stub_entry and ZO_tb_mle_header from zoffsets.h
  - Writes to our BP location (at 0x0cc)

1. TB stub early:
  - Early assembly entry code in "compressed" to setup basics
  - This just gets us off the ground to startup_32

2. TB stub late:
  - Later chunk of code in "kernel" to do other needed tasks.
  - Need an early C module to hash the zero page and update
    the TPM before using the boot params. This is called from
    the slightly later 64b code.
  - Try to use the sha1 kernel code via #includes
  - Will need an early TPM driver.
  - Need to figure out what needs validation:
    * Valideate PMRs and DEV ranges here
    * Not going to bother with TXT heap validation.
  - Need to figure out what comparable ops for SKINIT go here.
  - Pull in DEV map or PMR for expanded piggy end.

3. TB SMP bringup:
  - Will happen when the kernel runs the smpboot.c code.
  - Need to handle relocations in RM piggy.
  - DEV protect rmpiggy in init.c
    * SKINIT AP startup will vector to realmode code in relocated rmpiggy
  - Low PMR wil cover relocated rmpiggy
    * TXT AP startup will attempt to vectore to startup_32 in relocated rmpiggy
  - Need to deal with resetting MSR_APICBASE on Intel (not sure where to do it)

4. Main security environment:
  - This is the code in u-root.
  - All policy handling here.
  - Customizable security operations.
  - Module handling and kexec next kernel.

Kernel Config:
---------------------------------------------------------------------

We have control over the way the IL kernel is built.
  - Most drivers, files systems, other modules etc, can be removed.
  - Assume CONFIG_64BIT and CONFIG_X86_64
  - Assume CONFIG_RANDOMIZE_BASE (KASLR) is not set
  - This implies CONFIG_X86_NEED_RELOCS and CONFIG_RANDOMIZE_MEMORY not set.
  - Have control over CONFIG_PHYSICAL_START and CONFIG_PHYSICAL_ALIGN to set
    where the actual kernel ends up.
  - Disable CONFIG_HOTPLUG_CPU and CONFIG_ACPI_HOTPLUG_CPU.
    https://launchpadlibrarian.net/374105894/0001-UBUNTU-Config-azure-CONFIG_HOTPLUG_CPU-n.patch
  - Possibly have more control over setting BP_kernel_alignment and BP_init_size
    in the early tb_stub

TXT Specific:
---------------------------------------------------------------------

Early asm:
--------------------
  Taken care of in the tb_stub code.
  Enable NMIs
  Clear TXT error regs
  TXTCR_CMD_SECRETS
  TXTCR_CMD_OPEN_LOCALITY1

Post Launch
--------------------

Command Line:
  What to do with the command lines from GRUB.
  For TXT and SKINIT, the IL cmdline will be measured in tb_main early stub code
  The cmdlines will be in the IL boot proto struct that TB is handed. Mmeasured in u-root.

RACM Handling:
  No RACMs exist. Put a TODO to add future support if neeed.

BSP check:
  Taken care of in tb_stub.

E820:
  Taken care of by GRUB and Linux kernel depending on EFE or legacy boot.

Policy:
  u-root is effectively our VL policy.

Platform Modules:
  IL has its own plan to get module info etc.
  All other kernels and modules will be validated in u-root.

Validation:
  Validate PMRs and DEV ranges

AP Wakeup:
  Wired into the smpboot and rmpiggy code.

TXTCR_CMD_CLOSE_LOCALITY2

PMR Usage
---------------------------------------------------------------------

TB will  determine what memory it will try to cover with the PMRs. The
information is passed to the ACM through the TXT heap. The ACM does the
actual PMR configuring.

TB will to cover as much physical RAM as possible. The high PMR covers
all memory over 4Gb. The low PMR has some special logic to figure out how
much memory under 4Gb it can cover.

TB need an algorith to cover this logic. It starts by assuming it
can cover all memory under 4Gb. It then looks for the first reserved memory
area it encounters that is > lo_pmr_min_memory. When that location is found it stops
looking and that is the extent of what the low PMR maps. This is done because
in some firmwares, covering certain reserved areas can cause hangs purportedly
due to some USB controllers/devices.

Linux AP Startup
---------------------------------------------------------------------

kernel/smpboot.c
  do_boot_cpu()
    wakeup_cpu_via_init_nmi()
      wakeup_secondary_cpu_via_init()
        - INIT/SIPI/SIPI done here
        - start_eip is real_mode_header->trampoline_start
        - real_mode_header->trampoline_start is in the relocated rmpiggy

realmode/init.c
  setup_real_mode()
    - copies rmpiggy to an addr < 1M
    - routine fixes up rmpiggy with relocs
    - rmpiggy has 16b entry point + trasition to 32b and 64b
    - code is in realmode/rm/trampoline_64.S

Intel TXT AP Startup
---------------------------------------------------------------------

There are two ways that APs can be started after GETSECC[SENTER] returns:
  - The SINIT put the APs in an MWAIT. The MONITOR address is returned in
    the SINIT-MLE heap area in RlpWakeupAddr.
  - The SINIT put the APs in a state where GETSEC[WAKEUP] must be called to
    start the APs.

The AP state upon resuming is similar to that of the BSP post launch. The TXT
spec and SDM describe this state.

AMD SKINIT AP Startup
---------------------------------------------------------------------

The AMD System Developer's manual describes the state of the APs post
launch.
  - SKINIT asserts INIT on all the APs.
  - The wakeup code must de-assert INIT and do the SIPI/SIPI sequence.
  - The startup vector is 16 bit real mode code like a normal INIT/SIPI/SIPI
    startup.
  - The startup code must STGI up front.
  - If there is any other state that needs restoring, the startup code
    would do that.

MCE Kernel Enabling
---------------------------------------------------------------------
Below shows the paths that end up enabling MCEs on all CPUs when the BSP
or APs are ready. Therefore the MCE enabling is not needed in the tb_stub.

On the BSP, MCE enabled sometime during main.c:start_kernel() doing all
the kernel startup work:

x86_64_start_kernel()
  x86_64_start_reservations()
    main.c:start_kernel()
      check_bugs()
        identify_boot_cpu()
          mcheck_cpu_init()
            __mcheck_cpu_init_generic()
              cr4_set_bits(X86_CR4_MCE);

For APs, the pointer to the start_secondary() function is set in the global
initial_code which is where the code in kernel/head_64.S:secondary_startup_64()
 ends up jumping.

do_boot_cpu()
  initial_code = start_secondary()
    smp_callin()
      smp_store_cpu_info()
        identify_secondary_cpu()
          mcheck_cpu_init()
            __mcheck_cpu_init_generic()
              cr4_set_bits(X86_CR4_MCE);

Boot params and Command line
---------------------------------------------------------------------

The zero page is copied to the boot_params structure early in kernel/head64.c
in copy_bootdata(). This is what is used by the kernel and what needs
measuring. The structure is defined at the top of kernel/setup.c

The command line is copies to a char buffer in kernel/head64.c also in
copy_bootdata(). The boot_command_line buffer is a global fixed size buffer
in init/main.c.
