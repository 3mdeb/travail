---- Trenchboot Parameters ----

This is a listing of the various parameters that the GRUB loader will need to
setup in a number of places for the post launch environment and the IL kernel.

-- Linux Bootparams --

Also known as the zero page. The code in grub-core/loader/i386/linux.c is
primarily used to set these up. They are defined in include/grub/i386/linux.h
by:

struct linux_kernel_params

This must match the boot params defined in the kernel including adding the new
Trenchboot params (see below). Note the e820 memory map is populated here as
well.

TODO: It is not clear yet how to share this code since Trenchboot will need to
do all the same things and more.

TODO: It is not clear how the system memory map which from EFI which could be
bigger is handled in the fixed size e820. The EFI stub code in the kernel uses
the boot param setup_data to handle the overflow but GRUB does not seem to use
it. The file grub-core/efiemu/mm.c may have the answer - it looks like it is
where the EFI map is turned into the GRUB map after EBS.

-- Trenchboot Bootparams --

Trenchboot will have a single boot param in the setup_header:
(arch/x86/include/uapi/asm/bootparam.h):

sl_mle_hdr: This 32b value is filled in by the build tool at IL kernel build
            time and is read by the loader to know where the TXT MLE header
            within the MLE. GRUB must fill in a number of values in this
            header. This header is also used by SKINIT (see below for both
            usages).

-- TXT Heap Params --

The TXT heap has an area called the OS to MLE data structure that is used to
pass values from pre to post launch. The offsets are defined in
arch/x86/include/asm/trenchboot.h. These are the fields:

zero_page_addr: 32 bit address of the zero page in low memory. Setup by the
                loader.

msb_key_hash: TODO Daniel has to fill this in. Setup by the loader.

saved_misc_enable_msr: 64 bit saved value of the misc enable MSR that must
                       be restored in early stub. Setup by the launch code.

saved_mtrr_state: Array of pairs of 64 bit saved value of the misc variable
                  MTRRs MSR values. Setup by the launch code.

lo_pmr_min: Special value for setting up the low PMR. Setup by the loader.

ap_wake_ebp: 64 bit area to save %ebp so the APs can locate themselves
             when woken. Written by the BSP stub.

ap_rm_entry: 64 bit area to store physical address for the realmode entry
             thunk. Written by the TB SMP code.

event_log_buffer: TODO Daniel has to fill this in. Setup by the loader.

-- LZ Header --

The LZ header is offset 4 bytes in the landing zone. It has the following
fields that GRUB must setup (the type lz_header_t defines the fields in
lz/include/boot.h):

slaunch_loader_base: The physical base of the IL used to hash the IL into
                     PCR 17 in the LZ. Setup by the loader.

slaunch_loader_size: The total size of the IL used to hash the IL into
                     PCR 17 in the LZ. Setup by the loader.

zero_page_addr: 32 bit address of the zero page in low memory. Setup by the
                loader.

msb_key_hash: TODO Daniel has to fill this in. Setup by the loader.

-- MLE Header --

During a TXT secure launch, several fields in the MLE header must be filled
in. All values are 4 byte integers. These include:

UUID: At offset 0. Hardcoded to specified value.

HeaderLen: At offset 16. Length of header in bytes.  Hardcoded to specified
           the length.

Version: At offset 20. Version number of this structure. Hardcoded to
         version 2.2 per the spec.

EntryPoint: At offset 24. Linear (virt) entry point of MLE. This is really
            the virtual offset to the sl_stub_entry entry point. Since the
            pages start at the beginning of the vmlinuz image in memory, this
            is just the offset from the start of vmlinuz to tb_stub_entry. So
            this can be hardcoded using the symbol name.

FirstValidPage: At offset 28. Starting linear address of (first valid
                page of) MLE. First page is start of MLE so hardcoded to 0.

MleStart: At offset 32. Offset within MLE binary file of first byte
          of MLE, as specified in page table. Beginning of vmlinuz binary
          is the beginning of the MLE so hardcoded to 0. Note since this is
          only intended for use by software, it doesn't matter whether it is
          set.

MleEnd: At offset 36. Offset within MLE binary file of last byte
        + 1 of MLE, as specified in page table. Needs to be set to vmlinuz
        image size + 1. The ACM validates this field so it must he set to the
        size of the MLE. This is done by the loader.

Capabilities: At offset 40. Bit vector of MLE-supported capabilities. Hardcoded
              to the flags we want.

CmdlineStart: At offset 44. Starting linear address of command line. Not used,
              hardcoded to 0 per the spec.

CmdlineEnd: At offset 48. Ending linear address of command line. Not used,
            hardcoded to 0 per the spec.

SKINIT also uses the MLE header. In particular it uses these fields:

UUID: At offset 0. Hardcoded to specified value. Used to validate that it is
      the MLE header.

EntryPoint: At offset 24. For SKINIT, this is the physical offset of the
            sl_stub entry point in the compressed IL kernel image. Setup
            the same way for SKINIT.

LZPhysAddr: (FirstValidPage) At offset 28. Used to hold the physical base
            address of the landing zone. Setup by the LZ.
