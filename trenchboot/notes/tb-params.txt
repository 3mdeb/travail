---- Trenchboot Parameters ----

This is a listing of the various parameters that the GRUB loader will need to
setup in a number of places for the post launch environment and the IL kernel.

-- Linux Bootparams --

Also known as the zero page. The code in grub-core/loader/i386/linux.c is
primarily used to set these up. They are defined in include/grub/i386/linux.h
by:

struct linux_kernel_params

This must match the boot params defined in the kernel including adding the new
Trenchboot params (see below). Note the e820 memory map is populated here as
well.

TODO: It is not clear yet how to share this code since Trenchboot will need to
do all the same things and more.

TODO: It is not clear how the system memory map which from EFI which could be
bigger is handled in the fixed size e820. The EFI stub code in the kernel uses
the boot param setup_data to handle the overflow but GRUB does not seem to use
it. The file grub-core/efiemu/mm.c may have the answer - it looks like it is
where the EFI map is turned into the GRUB map after EBS.

-- Trenchboot Bootparams --

The following specific Trenchboot values need to be setup in the boot params
(the trenchboot_info struct layout can be seen in
arch/x86/include/uapi/asm/bootparam.h):

tb_entry: This is actually filled in by the build tool at IL kernel build time
          and is read by GRUB to know where the protected mode Trenchboot stub
          entry point location is. GRUB uses this to calculate code32_start.

tb_mle_hdr: This is actually filled in by the build tool at IL kernel build
            time and is read by GRUB to know where the TXT MLE header within
            the MLE. GRUB must fill in a number of values in this table (see
            below).

tb_lo_pmr_min: Special value for setting up the low PMR.

tb_flags: GRUB should set the late launch architecture and the active flag.


tb_xbi: The extended multiboot 2 structure that is passed to the IL kernel
        containing all boot information for starting the real kernel.

The other values are used elsewhere, e.g. the landing zone fills in tb_dev_map.

-- TXT Heap Params --

The TXT heap has an area called the OS to MLE data structure that is used to
pass values from pre to post launch. The offsets are defined in
arch/x86/include/asm/trenchboot.h. These are the fields:

zero_page_addr: 32 bit address of the zero page in low memory.

msb_key_hash: TODO Daniel has to fill this in.

-- LZ Header --

The LZ header is offset 4 bytes in the landing zone. It has the following
fields that GRUB must setup (the type lz_header_t defines the fields in
lz/include/boot.h):

trenchboot_loader_size: The total size of the IL used to hash the IL into
                        PCR 17 in the LZ.

zero_page_addr:  32 bit address of the zero page in low memory.

msb_key_hash: TODO Daniel has to fill this in.

-- MLE Header --

During a TXT secure launch, several fields in the MLE header must be filled
in. All values are 4 byte integers. These include:

UUID: At offset 0. Hardcoded to specified value.

HeaderLen: At offset 16. Length of header in bytes.  Hardcoded to specified
           the length.

Version: At offset 20. Version number of this structure. Hardcoded to
         version 2.2 per the spec.

EntryPoint: At offset 24. Linear (virt) entry point of MLE. Needs to be set.

FirstValidPage: At offset 28. Starting linear address of (first valid
                page of) MLE. First page is start of MLE so hardcoded to 0.

MleStart: At offset 32. Offset within MLE binary file of first byte
          of MLE, as specified in page table. Beginning of vmlinuz binary
          is the beginning of the MLE so hardcoded to 0.

MleEnd: At offset 36. Offset within MLE binary file of last byte
        + 1 of MLE, as specified in page table. Needs to be set to vmlinuz
        image size + 1.

Capabilities: At offset 40. Bit vector of MLE-supported capabilities. Hardcoded
              to the flags we want.

CmdlineStart: At offset 44. Starting linear address of command line. Not used,
              hardcoded to 0 per the spec.

CmdlineEnd: At offset 48. Ending linear address of command line. Not used,
            hardcoded to 0 per the spec.
