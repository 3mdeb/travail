General Notes:
---------------------------------------------------------------------

Big questions:
 - What boot params do we need to deal with in tb_stub?
 - Memory map - pass as e820 in boot params (looks like EFI
   stub stuff just turns mem map into e820 on EFI boot)?
 - How/where to handle and measure cmdlines for other boot modules?
 - How to pass other modules to IL?
 - Where to measure other modules?
 - What to do about Runtime Services (not really booting EFI)?
 - TXT: What about the shared page?
 - TXT: What about S3 hooks?
 - TXT: What are we passing in the OS-MLE data?
 - SKINIT: What post launch things need to be checked?

Stages:
---------------------------------------------------------------------

This seems like the stages of Trenchboot in the IL starting with the
earliest:

0. Build time:
  - Built tool reads ZO_tb_stub_entry from zoffsets.h
  - Writes to our BP location (at 0x0cc)

1. TB stub early:
  - Early assembly entry code in "compressed" to setup basics
  - Need an early C module to hash the zero page and update
    the TPM before using the boot params.
  - Try to use the sha1 kernel code via #includes
  - Will need an early TPM driver.

2. TB stub late:
  - Later chunk of code in "kernel" to do other needed tasks.
  - Probably the place to setup logging.
  - Need to figure out what other ops that TBOOT did go here.
    * Valideate TXT heap and PMRs here
  - Need to figure out what comparable ops for SKINIT go here.
  - Pull in DEV map or PRM for expanded piggy end.

3. TB SMP bringup:
  - Will happen when the kernel runs the smpboot.c code.
  - DEV protect rmpiggy in init.c

4. Main security environment:
  - This is the code in u-root.
  - All policy handling here.
  - Customizable security operations.
  - Module handling and kexec next kernel.

Kernel Config:
---------------------------------------------------------------------

We have control over the way the IL kernel is built.
  - Most drivers, files systems, other modules etc, can be removed.
  - Assume CONFIG_64BIT and CONFIG_X86_64
  - Assume CONFIG_RANDOMIZE_BASE (KASLR) is not set
  - This implies CONFIG_X86_NEED_RELOCS and CONFIG_RANDOMIZE_MEMORY not set.
  - Have control over CONFIG_PHYSICAL_START and CONFIG_PHYSICAL_ALIGN to set
    where the actual kernel ends up.
  - Disable CONFIG_HOTPLUG_CPU and CONFIG_ACPI_HOTPLUG_CPU.
    https://launchpadlibrarian.net/374105894/0001-UBUNTU-Config-azure-CONFIG_HOTPLUG_CPU-n.patch

TXT/TBOOT Specific:
---------------------------------------------------------------------

boot.S:
--------------------
  Taken care of in the tb_stub code.

begin_launch():
--------------------

tboot_parse_cmdline():
  What to do with the command lines from GRUB. The TBOOT one gets put in the MLE
    and measured by TXT.
  For TXT, the IL cmdline will be part of the MLE so it gets measured.
  For SKINIT, the LZ measures it. Same PCR in both cases?
  The cmdlines will be in the MB2 struct that TB is handed. Probably measured in
    u-root.

get_tboot_call_racm_check():
  No RACMs exist. Put a TODO to add future support if neeed.

if ( !(rdmsr(MSR_APICBASE) & APICBASE_BSP) )
  Taken care of in tb_stub

copy_e820_map():
  To use and adjust. We will handle this differently.

tpm_detect():
  Already been done in the GRUB TB code.

verify_IA32_se_svn_status():
  TXT only. Not sure where it should happen?
  It seems it is really a prelaunch check and we don't really care.

set_policy():
apply_policy(err):
  TXT only. u-root is effectively our VL policy.

launch_racm():
  No RACMs exist. Put a TODO to add future support if neeed.

supports_txt():
  The GRUB bits have done that.

txt_display_errors():
  This is something we can do later in the IL kernel
    once logging is operational.

verify_platform():
  The GRUB bits have done that.

verify_loader_context():
  IL has its own plan to get module info etc.

post_launch():
--------------------

txt_post_launch():
  txt_post_launch_verify_platform():
    Verify heap seems like something we can do later
    Verify MTRRs. What to do about passig MTRRs? See below...
    Verify PMRs seems like something we can do later
      Leave these as a TODO for now.

  Clear error regs
    Throw in tb_stub.

  txt_wakeup_cpus():
    I believe we will do this very differently in the SMP bringup code
      without putting APs in mini guests.

  Restore MSR_IA32_MISC_ENABLE
  restore_mtrrs():
    The kernel should set this stuff up correctly. Plan to do nothing around this.

  apply_policy():
    See above note on policy.

  TXTCR_CMD_SECRETS
    Done in early tb_stub at end

  TXTCR_CMD_OPEN_LOCALITY1
    Done in early tb_stub at end + TXTCR_CMD_CLOSE_LOCALITY2

save_vtd_dmar_table():
  Not sure why this is done along with restore_vtd_dmar_table()

remove_txt_modules():
  My guess is that the GRUB bits will figure out what ACM to use
    and this routine is meamingless because it is about the MBI

txt_protect_mem_regions():
  Involves updating e820. Needs consideration.
  May have to do this very early before kernel gets at the e820
  Presumably the bootparams can be munged in place.

verify_modules():
  This will happen when we measure the other modules in u-root

/* verify that tboot is in valid RAM (i.e. E820_RAM) */
  Do this early - see txt_protect_mem_regions

/* protect ourselves, MLE page table, and MLE/kernel shared page */
  Do this early - see txt_protect_mem_regions

TBOOT_LOG_TARGET_MEMORY
  Need to figure out logging

replace_e820_map()
  Does not make sense for us

print_e820_map()
  Need to figure out logging

verify_all_modules()
  Modules and policy handled in u-root

verify_all_nvindices()
  Seems this could be deferred to later, possibly in u-root

seal_pre_k_state()
  Policy handled in u-root

_tboot_shared
  This will look very different to us

TBOOT PMR Usage
---------------------------------------------------------------------

TBOOT determines what memory it will try to cover with the PMRs. The
information is passed to the ACM through the TXT heap. The ACM does the
actual PMR configuring.

TBOOT tries to cover as much physical RAM as possible. The high PMR covers
all memory over 4Gb. The low PMR has some special logic to figure out how
much memory under 4Gb it can cover.

The routine get_ram_ranges() contains that logic. It starts by assuming it
can cover all memory under 4Gb. It then looks for the first reserved memory
area it encounters that is > g_min_ram. When that location is found it stops
looking and that is the extent of what the low PMR maps. This is done because
in some firmwares, covering certain reserved areas can cause hangs purportedly
due to some USB controllers/devices.

This is an example of what TBOOT might end up covering:

TBOOT: highest min_ram (0x2000000) region found: base=0x100000, size=0x9cb3f000
TBOOT: min_lo_ram: 0x0, max_lo_ram: 0x9cc3f000
TBOOT: min_hi_ram: 0x100000000, max_hi_ram: 0x44e000000

Linux AP Startup
---------------------------------------------------------------------

kernel/smpboot.c
  do_boot_cpu()
    wakeup_cpu_via_init_nmi()
      wakeup_secondary_cpu_via_init()
        - INIT/SIPI/SIPI done here
        - start_eip is real_mode_header->trampoline_start
        - real_mode_header->trampoline_start is in the relocated rmpiggy

realmode/init.c
  setup_real_mode()
    - copies rmpiggy to an addr < 1M
    - routine fixes up rmpiggy with relocs
    - rmpiggy has 16b entry point + trasition to 32b and 64b
    - code is in realmode/rm/trampoline_64.S

Intel TXT AP Startup
---------------------------------------------------------------------

There are two ways that APs can be started after GETSECC[SENTER] returns:
  - The SINIT put the APs in an MWAIT. The MONITOR address is returned in
    the SINIT-MLE heap area in RlpWakeupAddr.
  - The SINIT put the APs in a state where GETSEC[WAKEUP] must be called to
    start the APs.

init_txt_heap()
  - Informs vi the MLE header the SINIT which of the methods above are supported
    by the MLE. In general both should be supported.
  - Selects the method by setting the bit in the OS-SINIT Capabilities field
    (e.g. os_sinit_data->capabilities.rlp_wake_monitor = 1) based on what the
    given SINIT module capabilities say is supported.

txt_wakeup_cpus()
  - Sets up the MLE join structure with information needed by TXT to wake up the
    APs including the entry point _txt_wakeup().
  - The MLE join structure is set via TXTCR_MLE_JOIN.
  - The function tests which one to use as was set in the OS-SINIT Capabilities
    set pre-launch. This will be either:
     - *((uint32_t *)(unsigned long)(sinit_mle_data->rlp_wakeup_addr)) = 0x01;
     - __getsec_wakeup()

The AP state upon resuming is similar to that of the BSP post launch. The TXT
spec and SDM describe this state.

AMD SKINIT AP Startup
---------------------------------------------------------------------

The AMD System Developer's manual describes the state of the APs post
launch.
  - SKINIT asserts INIT on all the APs.
  - The wakeup code must de-assert INIT and do the SIPI/SIPI sequence.
  - The startup vector is 16 bit real mode code like a normal INIT/SIPI/SIPI
    startup.
  - The startup code must STGI up front.
  - If there is any other state that needs restoring, the startup code
    would do that.
