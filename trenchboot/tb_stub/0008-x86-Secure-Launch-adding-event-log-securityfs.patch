From 2f570a8283863c26ad2f74d75af8313affe25c38 Mon Sep 17 00:00:00 2001
From: "Daniel P. Smith" <dpsmith@apertussolutions.com>
Date: Fri, 22 Feb 2019 10:33:05 -0500
Subject: [PATCH 8/8] x86: Secure Launch adding event log securityfs

The late init functionality registers securityfs nodes to allow fetching
of the late launch TPM log and other platform specific operations. TXT also
stores a copy of the DMAR ACPI table to protect it from tampering during the
late launch. This copy of the table will be made available to the ACPI drivers
instead of the one found in the firmware.

Signed-off-by: Daniel P. Smith <dpsmith@apertussolutions.com>
---
 arch/x86/kernel/slaunch.c | 161 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 161 insertions(+)

diff --git a/arch/x86/kernel/slaunch.c b/arch/x86/kernel/slaunch.c
index 9e6f2879461c..9c48e1312c52 100644
--- a/arch/x86/kernel/slaunch.c
+++ b/arch/x86/kernel/slaunch.c
@@ -340,3 +340,164 @@ void slaunch_setup(void)
 		panic("Invalid platform: not Intel or AMD\n");
 	}
 }
+
+struct memfile {
+	char *name;
+	void __iomem *addr;
+	size_t size;
+};
+
+static struct memfile sl_evtlog = {"eventlog", 0, 0};
+static void __iomem *txt_heap = NULL;
+
+static ssize_t sl_memfile_read(struct memfile *file, char __user *outbuf, size_t count, loff_t *pos)
+{
+	void *buf;
+	int ret = -EFAULT;
+
+	if (!file->addr)
+		goto err;
+
+	if (*pos >= file->size) {
+		ret = 0;
+		goto err;
+	}
+
+	if (*pos + count > file->size)
+		count = file->size - *pos;
+
+	buf = kmalloc(count, GFP_KERNEL);
+	if (!buf) {
+		ret = -ENOMEM;
+		goto free;
+	}
+
+	memcpy_fromio(buf, file->addr + *pos, count);
+	if (copy_to_user(outbuf, buf, count))
+		goto free;
+
+	*pos += count;
+
+	ret = count;
+
+free:
+	kfree(buf);
+
+err:
+	return ret;
+}
+
+static ssize_t sl_evtlog_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
+{
+	return sl_memfile_read(&sl_evtlog, buf, count, pos);
+}
+
+static const struct file_operations sl_evtlog_ops = {
+        .read = sl_evtlog_read,
+	.llseek	= default_llseek,
+};
+
+#define SL_DIR_ENTRY	1 /* directoy node must be last */
+#define SL_FS_ENTRIES	2
+
+static struct dentry *fs_entries[SL_FS_ENTRIES];
+
+static long slaunch_expose_securityfs(void)
+{
+	long ret = 0;
+	int entry = SL_DIR_ENTRY;
+
+	fs_entries[entry] = securityfs_create_dir("slaunch", NULL);
+	if (IS_ERR(fs_entries[entry])) {
+		printk(KERN_ERR PREFIX
+			"Error creating securityfs sl_evt_log directory\n");
+		ret = PTR_ERR(fs_entries[entry]);
+		goto err;
+	}
+
+	if (sl_evtlog.addr > 0) {
+		entry--;
+		fs_entries[entry] = securityfs_create_file(sl_evtlog.name,
+					   S_IRUSR | S_IRGRP,
+					   fs_entries[SL_DIR_ENTRY], NULL,
+					   &sl_evtlog_ops);
+		if (IS_ERR(fs_entries[entry])) {
+			printk(KERN_ERR PREFIX
+				"Error creating securityfs %s file\n",
+				sl_evtlog.name);
+			ret = PTR_ERR(fs_entries[entry]);
+			goto err_dir;
+		}
+	}
+
+	return 0;
+
+err_dir:
+	securityfs_remove(fs_entries[SL_DIR_ENTRY]);
+err:
+	return ret;
+}
+
+static void slaunch_teardown_securityfs(void)
+{
+	int i;
+
+	for (i = 0; i < SL_FS_ENTRIES; i++)
+		securityfs_remove(fs_entries[i]);
+
+	if (sl_flags & SL_FLAG_ARCH_TXT) {
+		if (txt_heap) {
+			iounmap(txt_heap);
+			txt_heap = NULL;
+		}
+	}
+
+	sl_evtlog.addr = 0;
+	sl_evtlog.size = 0;
+}
+
+static void slaunch_intel_evtlog(void)
+{
+	void __iomem *config;
+	struct txt_os_mle_data *params;
+
+	config = ioremap(TXT_PUB_CONFIG_REGS_BASE, TXT_NR_CONFIG_PAGES *
+			 PAGE_SIZE);
+	if (!config) {
+		printk(KERN_ERR PREFIX "Error failed to ioremap TXT reqs\n");
+		return;
+	}
+
+	/* now map TXT heap */
+	txt_heap = ioremap(*(u64 *)(config + TXTCR_HEAP_BASE),
+		    *(u64 *)(config + TXTCR_HEAP_SIZE));
+	iounmap(config);
+	if (!txt_heap) {
+		printk(KERN_ERR PREFIX "Error failed to ioremap TXT heap\n");
+		return;
+	}
+
+	params = (struct txt_os_mle_data *)txt_os_mle_data_start(txt_heap);
+
+	sl_evtlog.size = TXT_MAX_EVENT_LOG_SIZE;
+	sl_evtlog.addr = (void __iomem*)&params->event_log_buffer[0];
+}
+
+static int __init slaunch_late_init(void)
+{
+	if (sl_flags & SL_FLAG_ARCH_TXT)
+		slaunch_intel_evtlog();
+	else
+		BUG();
+
+	return slaunch_expose_securityfs();
+}
+
+static void __exit slaunch_exit(void)
+{
+	slaunch_teardown_securityfs();
+}
+
+late_initcall(slaunch_late_init);
+
+__exitcall(slaunch_exit);
-- 
2.13.6

