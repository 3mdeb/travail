From f1c6087181092ffbedbac859a01ca03ba83a20dc Mon Sep 17 00:00:00 2001
From: "Daniel P. Smith" <dpsmith@apertussolutions.com>
Date: Fri, 22 Feb 2019 10:33:05 -0500
Subject: [PATCH 8/8] x86: Secure Launch adding event log securityfs

The late init functionality registers securityfs nodes to allow fetching
of the late launch TPM log and other platform specific operations. TXT also
stores a copy of the DMAR ACPI table to protect it from tampering during the
late launch. This copy of the table will be made available to the ACPI drivers
instead of the one found in the firmware.

Signed-off-by: Daniel P. Smith <dpsmith@apertussolutions.com>
---
 arch/x86/kernel/slaunch.c | 238 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 238 insertions(+)

diff --git a/arch/x86/kernel/slaunch.c b/arch/x86/kernel/slaunch.c
index 2d373c0b45a8..bdbdba83b09a 100644
--- a/arch/x86/kernel/slaunch.c
+++ b/arch/x86/kernel/slaunch.c
@@ -10,6 +10,10 @@
 
 #include <linux/init.h>
 #include <linux/linkage.h>
+#include <linux/mm.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+#include <linux/security.h>
 #include <linux/memblock.h>
 #include <asm/segment.h>
 #include <asm/boot.h>
@@ -188,3 +192,237 @@ void slaunch_setup(void)
 		return;
 	}
 }
+
+/* This should be plenty of room */
+static u8 txt_dmar[PAGE_SIZE] __attribute__((aligned(16)));
+
+struct acpi_table_header *slaunch_get_dmar_table(struct acpi_table_header *dmar)
+{
+	if (memcmp(txt_dmar, "DMAR", 4))
+		return dmar;
+	return (struct acpi_table_header*)(&txt_dmar[0]);
+}
+
+static void slaunch_copy_dmar_table(void)
+{
+	void __iomem *txt;
+	void __iomem *heap;
+	void __iomem *sinit_mle_data;
+	u32 dmar_offset, dmar_size;
+	u64 base, size;
+
+	memset(&txt_dmar, 0, PAGE_SIZE);
+
+	txt = ioremap(TXT_PRIV_CONFIG_REGS_BASE,
+		      TXT_NR_CONFIG_PAGES * PAGE_SIZE);
+	if (!txt) {
+		printk(KERN_ERR PREFIX
+		       "Error ioremap of TXT registers\n");
+		/* TODO add TPM info log entry */
+		return;
+	}
+
+	memcpy_fromio(&base, txt + TXTCR_HEAP_BASE, sizeof(u64));
+	if (unlikely(base == ~0ULL)) {
+		printk(KERN_ERR PREFIX "Error invalid TXT heap base\n");
+		/* TODO add TPM info log entry */
+		iounmap(txt);
+		return;
+	}
+
+	memcpy_fromio(&size, txt + TXTCR_HEAP_SIZE, sizeof(u64));
+	if (unlikely(size == ~0ULL)) {
+		printk(KERN_ERR PREFIX "Error invalid TXT heap size\n");
+		/* TODO add TPM info log entry */
+		iounmap(txt);
+		return;
+	}
+
+	iounmap(txt);
+
+	heap = ioremap(base, size);
+	if (unlikely(!heap)) {
+		printk(KERN_ERR PREFIX "Error ioremap TXT heap failed\n");
+		/* TODO add TPM info log entry */
+		return;
+	}
+
+	sinit_mle_data = txt_sinit_mle_data_start(heap);
+	dmar_size = readl(sinit_mle_data + TXT_SINIT_MLE_DMAR_TABLE_SIZE);
+	dmar_offset = readl(sinit_mle_data + TXT_SINIT_MLE_DMAR_TABLE_OFFSET);
+
+	if (unlikely(dmar_size > PAGE_SIZE)) {
+		/* TODO add TPM info log entry */
+		iounmap(heap);
+		return;
+	}
+
+	memcpy_fromio(&txt_dmar[0], (void*)(sinit_mle_data + dmar_offset),
+		      dmar_size);
+	iounmap(heap);
+}
+
+struct memfile {
+	char *name;
+	void __iomem *addr;
+	size_t size;
+};
+
+static struct memfile sl_evtlog = {"eventlog", 0, 0};
+static void __iomem *txt_heap = NULL;
+
+static ssize_t sl_memfile_read(struct memfile *file, char __user *outbuf, size_t count, loff_t *pos)
+{
+	void *buf;
+	int ret = -EFAULT;
+
+	if (!file->addr)
+		goto err;
+
+	if (*pos >= file->size) {
+		ret = 0;
+		goto err;
+	}
+
+	if (*pos + count > file->size)
+		count = file->size - *pos;
+
+	buf = kmalloc(count, GFP_KERNEL);
+	if (!buf) {
+		ret = -ENOMEM;
+		goto free;
+	}
+
+	memcpy_fromio(buf, file->addr + *pos, count);
+	if (copy_to_user(outbuf, buf, count))
+		goto free;
+
+	*pos += count;
+
+	ret = count;
+
+free:
+	kfree(buf);
+
+err:
+	return ret;
+}
+
+static ssize_t sl_evtlog_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
+{
+	return sl_memfile_read(&sl_evtlog, buf, count, pos);
+}
+
+static const struct file_operations sl_evtlog_ops = {
+        .read = sl_evtlog_read,
+	.llseek	= default_llseek,
+};
+
+#define SL_DIR_ENTRY	1 /* directoy node must be last */
+#define SL_FS_ENTRIES	2
+
+static struct dentry *fs_entries[SL_FS_ENTRIES];
+
+static long slaunch_expose_securityfs(void)
+{
+	long ret = 0;
+	int entry = SL_DIR_ENTRY;
+
+	fs_entries[entry] = securityfs_create_dir("slaunch", NULL);
+	if (IS_ERR(fs_entries[entry])) {
+		printk(KERN_ERR PREFIX
+			"Error creating securityfs sl_evt_log directory\n");
+		ret = PTR_ERR(fs_entries[entry]);
+		goto err;
+	}
+
+	if (sl_evtlog.addr > 0) {
+		entry--;
+		fs_entries[entry] = securityfs_create_file(sl_evtlog.name,
+					   S_IRUSR | S_IRGRP,
+					   fs_entries[SL_DIR_ENTRY], NULL,
+					   &sl_evtlog_ops);
+		if (IS_ERR(fs_entries[entry])) {
+			printk(KERN_ERR PREFIX
+				"Error creating securityfs %s file\n",
+				sl_evtlog.name);
+			ret = PTR_ERR(fs_entries[entry]);
+			goto err_dir;
+		}
+	}
+
+	return 0;
+
+err_dir:
+	securityfs_remove(fs_entries[SL_DIR_ENTRY]);
+err:
+	return ret;
+}
+
+static void slaunch_teardown_securityfs(void)
+{
+	int i;
+
+	for (i = 0; i < SL_FS_ENTRIES; i++)
+		securityfs_remove(fs_entries[i]);
+
+	if (sl_flags & SL_FLAG_ARCH_TXT) {
+		if (txt_heap) {
+			iounmap(txt_heap);
+			txt_heap = NULL;
+		}
+	}
+
+	sl_evtlog.addr = 0;
+	sl_evtlog.size = 0;
+}
+
+static void slaunch_intel_evtlog(void)
+{
+	void __iomem *config;
+	struct txt_os_mle_data *params;
+
+	config = ioremap(TXT_PUB_CONFIG_REGS_BASE, TXT_NR_CONFIG_PAGES *
+			 PAGE_SIZE);
+	if (!config) {
+		printk(KERN_ERR PREFIX "Error failed to ioremap TXT reqs\n");
+		return;
+	}
+
+	/* now map TXT heap */
+	txt_heap = ioremap(*(u64 *)(config + TXTCR_HEAP_BASE),
+		    *(u64 *)(config + TXTCR_HEAP_SIZE));
+	iounmap(config);
+	if (!txt_heap) {
+		printk(KERN_ERR PREFIX "Error failed to ioremap TXT heap\n");
+		return;
+	}
+
+	params = (struct txt_os_mle_data *)txt_os_mle_data_start(txt_heap);
+
+	sl_evtlog.size = TXT_MAX_EVENT_LOG_SIZE;
+	sl_evtlog.addr = (void __iomem*)&params->event_log_buffer[0];
+}
+
+static int __init slaunch_late_init(void)
+{
+	if (sl_flags & SL_FLAG_ARCH_TXT) {
+		/* Make a copy of the TXT heap provided DMAR for IOMMU later */
+		slaunch_copy_dmar_table();
+		/* Any errors from previous call will go in event log */
+		slaunch_intel_evtlog();
+	}
+	else
+		BUG();
+
+	return slaunch_expose_securityfs();
+}
+
+static void __exit slaunch_exit(void)
+{
+	slaunch_teardown_securityfs();
+}
+
+late_initcall(slaunch_late_init);
+
+__exitcall(slaunch_exit);
-- 
2.13.6

