From 6ed79d50fde6589d6996b3e58d3b3c2f5a8d9261 Mon Sep 17 00:00:00 2001
From: "Daniel P. Smith" <dpsmith@apertussolutions.com>
Date: Thu, 18 May 2017 17:48:52 -0400
Subject: [PATCH 9/9] x86: Secure Launch adding event log securityfs

Signed-off-by: Daniel P. Smith <dpsmith@apertussolutions.com>
---
 arch/x86/kernel/slaunch.c | 178 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 178 insertions(+)

diff --git a/arch/x86/kernel/slaunch.c b/arch/x86/kernel/slaunch.c
index 07730676c1aa..bd53156ff1ca 100644
--- a/arch/x86/kernel/slaunch.c
+++ b/arch/x86/kernel/slaunch.c
@@ -1,8 +1,10 @@
 /*
  * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019 Apertus Solutions, LLC
  *
  * Author(s):
  *     Ross Philipson <ross.philipson@oracle.com>
+ *     Daniel P. Smith <dpsmith@apertussolutions.com>
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
@@ -21,6 +23,10 @@
 
 #include <linux/init.h>
 #include <linux/linkage.h>
+#include <linux/mm.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+#include <linux/security.h>
 #include <asm/segment.h>
 #include <asm/boot.h>
 #include <asm/msr.h>
@@ -30,6 +36,8 @@
 #include <asm/setup.h>
 #include <asm/slaunch.h>
 
+#define PREFIX	"SLAUNCH: "
+
 /* This should be plenty of room */
 static u8 txt_dmar[PAGE_SIZE] __attribute__((aligned(16)));
 
@@ -96,3 +104,173 @@ void slaunch_setup(void)
 	else
 		BUG();
 }
+
+struct memfile {
+	char *name;
+	void __iomem *addr;
+	size_t size;
+};
+
+static struct memfile sl_evtlog = {"eventlog", 0, 0};
+
+static ssize_t sl_memfile_read(struct memfile *file, char __user *outbuf, size_t count, loff_t *pos)
+{
+	void *buf;
+	int ret = -EFAULT;
+
+	if (!file->addr)
+		goto err;
+
+	if (*pos >= file->size) {
+		ret = 0;
+		goto err;
+	}
+
+	if (*pos + count > file->size)
+		count = file->size - *pos;
+
+	buf = kmalloc(count, GFP_KERNEL);
+	if (!buf) {
+		ret = -ENOMEM;
+		goto free;
+	}
+
+	memcpy_fromio(buf, file->addr + *pos, count);
+	if (copy_to_user(outbuf, buf, count))
+		goto free;
+
+	*pos += count;
+
+	ret = count;
+
+free:
+	kfree(buf);
+
+err:
+	return ret;
+}
+
+static ssize_t sl_evtlog_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
+{
+	return sl_memfile_read(&sl_evtlog, buf, count, pos);
+}
+
+static const struct file_operations sl_evtlog_ops = {
+        .read = sl_evtlog_read,
+	.llseek	= default_llseek,
+};
+
+#define SL_DIR_ENTRY	1 /* directoy node must be last */
+#define SL_FS_ENTRIES	2
+
+static struct dentry *fs_entries[SL_FS_ENTRIES];
+
+static long slaunch_expose_securityfs(void)
+{
+	long ret = 0;
+	int entry = SL_DIR_ENTRY;
+
+	fs_entries[entry] = securityfs_create_dir("slaunch", NULL);
+	if (IS_ERR(fs_entries[entry])) {
+		printk(KERN_ERR PREFIX
+			"Error creating securityfs sl_evt_log directory\n");
+		ret = PTR_ERR(fs_entries[entry]);
+		goto out;
+	}
+
+	if (sl_evtlog.addr > 0) {
+		entry--;
+		fs_entries[entry] = securityfs_create_file(sl_evtlog.name,
+					   S_IRUSR | S_IRGRP,
+					   fs_entries[SL_DIR_ENTRY], NULL,
+					   &sl_evtlog_ops);
+		if (IS_ERR(fs_entries[entry])) {
+			printk(KERN_ERR PREFIX
+				"Error creating securityfs %s file\n",
+				sl_evtlog.name);
+			ret = PTR_ERR(fs_entries[entry]);
+			goto out_dir;
+		}
+	}
+
+	return 0;
+
+out_dir:
+	securityfs_remove(fs_entries[SL_DIR_ENTRY]);
+out:
+	return ret;
+}
+
+static void slaunch_teardown_securityfs(void)
+{
+	int i;
+
+	for (i = 0; i < SL_FS_ENTRIES; i++)
+		securityfs_remove(fs_entries[i]);
+
+	if (sl_evtlog.addr) {
+		iounmap(sl_evtlog.addr);
+		sl_evtlog.addr = 0;
+		sl_evtlog.size = 0;
+	}
+}
+
+struct os_mle_data {
+    uint32_t zero_page_addr;
+    uint8_t  msb_key_hash[20];
+    uint8_t  event_log_buffer[TXT_MAX_EVENT_LOG_SIZE];
+} __packed;
+
+static void slaunch_intel_evtlog(void)
+{
+	void __iomem *heap, *config;
+	struct os_mle_data *params;
+
+	config = ioremap(TXT_PUB_CONFIG_REGS_BASE, TXT_NR_CONFIG_PAGES *
+			 PAGE_SIZE);
+	if (!config) {
+		printk(KERN_ERR PREFIX "Error failed to ioremap TXT reqs\n");
+		return;
+	}
+
+	/* now map TXT heap */
+	heap = ioremap(*(u64 *)(config + TXTCR_HEAP_BASE),
+		    *(u64 *)(config + TXTCR_HEAP_SIZE));
+	iounmap(config);
+	if (!heap) {
+		printk(KERN_ERR PREFIX "Error failed to ioremap TXT heap\n");
+		return;
+	}
+
+	params = (struct os_mle_data *)txt_os_mle_data_start(heap);
+
+	sl_evtlog.size = TXT_MAX_EVENT_LOG_SIZE;
+	sl_evtlog.addr = ioremap(*(u64 *)params->event_log_buffer,
+				sl_evtlog.size);
+}
+
+static void slaunch_amd_evtlog(void)
+{
+	/* TODO */
+}
+
+static int __init slaunch_late_init(void)
+{
+	if (boot_params.slaunch_info.sl_flags & SL_FLAG_ARCH_TXT)
+		slaunch_intel_evtlog();
+	else if (boot_params.slaunch_info.sl_flags & SL_FLAG_ARCH_SKINIT)
+		slaunch_amd_evtlog();
+	else
+		BUG();
+
+	return slaunch_expose_securityfs();
+}
+
+static void __exit slaunch_exit(void)
+{
+	slaunch_teardown_securityfs();
+}
+
+late_initcall(slaunch_late_init);
+
+__exitcall(slaunch_exit);
-- 
2.13.6

