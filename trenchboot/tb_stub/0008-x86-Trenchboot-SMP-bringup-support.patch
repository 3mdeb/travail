From 72adbdf2afac4c224093c3f717fa8093d2685bf2 Mon Sep 17 00:00:00 2001
From: Ross Philipson <ross.philipson@oracle.com>
Date: Tue, 2 Oct 2018 14:41:49 -0400
Subject: [PATCH 8/9] x86: Trenchboot SMP bringup support

Note the AP bringup is very different becuase SKINIT and the ACM leave
the APs in very different states post launch.

Signed-off-by: Ross Philipson <ross.philipson@oracle.com>
---
 arch/x86/include/asm/realmode.h          |  3 +++
 arch/x86/kernel/smpboot.c                | 27 +++++++++++++++++++++++++++
 arch/x86/realmode/rm/header.S            |  3 +++
 arch/x86/realmode/rm/trampoline_64.S     |  9 +++++++++
 arch/x86/realmode/rm/trampoline_common.S |  4 ++++
 5 files changed, 46 insertions(+)

diff --git a/arch/x86/include/asm/realmode.h b/arch/x86/include/asm/realmode.h
index 63b3393bd98e..b7f28f25389b 100644
--- a/arch/x86/include/asm/realmode.h
+++ b/arch/x86/include/asm/realmode.h
@@ -32,6 +32,9 @@ struct real_mode_header {
 #endif
 	/* APM/BIOS reboot */
 	u32	machine_real_restart_asm;
+#ifdef CONFIG_SECURE_LAUNCH_STUB
+	u32	sl_flag_arch;
+#endif
 #ifdef CONFIG_X86_64
 	u32	machine_real_restart_seg;
 #endif
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 6489067b78a4..136a7242885f 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -81,6 +81,7 @@
 #include <asm/cpu_device_id.h>
 #include <asm/spec-ctrl.h>
 #include <asm/hw_irq.h>
+#include <asm/slaunch.h>
 
 /* representing HT siblings of each logical CPU */
 DEFINE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_sibling_map);
@@ -728,6 +729,10 @@ wakeup_secondary_cpu_via_init(int phys_apicid, unsigned long start_eip)
 {
 	unsigned long send_status = 0, accept_status = 0;
 	int maxlvt, num_starts, j;
+#ifdef CONFIG_SECURE_LAUNCH_STUB
+	volatile u32 *sl_flag_arch =
+		(volatile u32 *) __va(real_mode_header->sl_flag_arch);
+#endif
 
 	maxlvt = lapic_get_maxlvt();
 
@@ -740,6 +745,24 @@ wakeup_secondary_cpu_via_init(int phys_apicid, unsigned long start_eip)
 		apic_read(APIC_ESR);
 	}
 
+#ifdef CONFIG_SECURE_LAUNCH_STUB
+	/*
+	 * On AMD, SKINIT returns with INIT asserted on all the APs so do
+	 * not send #INIT in this case. On Intel, the APs are woken earlier
+	 * in the Secure Launch process and put in the halt state so they
+	 * are waiting for an #INIT IPI
+	 *
+	 * The rest would be the normal SIPI process and then starting the
+	 * AP in the realmode blob code.
+	 */
+	if (slaunch_get_flags() & SL_FLAG_ARCH_SKINIT) {
+		*sl_flag_arch = SL_FLAG_ARCH_SKINIT;
+		goto skip_init;
+	}
+	else
+		*sl_flag_arch = SL_FLAG_ARCH_TXT;
+#endif
+
 	pr_debug("Asserting INIT\n");
 
 	/*
@@ -756,6 +779,10 @@ wakeup_secondary_cpu_via_init(int phys_apicid, unsigned long start_eip)
 
 	udelay(init_udelay);
 
+#ifdef CONFIG_SECURE_LAUNCH_STUB
+skip_init:
+#endif
+
 	pr_debug("Deasserting INIT\n");
 
 	/* Target chip */
diff --git a/arch/x86/realmode/rm/header.S b/arch/x86/realmode/rm/header.S
index 30b0d30d861a..8c4e922e43eb 100644
--- a/arch/x86/realmode/rm/header.S
+++ b/arch/x86/realmode/rm/header.S
@@ -31,6 +31,9 @@ GLOBAL(real_mode_header)
 #endif
 	/* APM/BIOS reboot */
 	.long	pa_machine_real_restart_asm
+#ifdef CONFIG_SECURE_LAUNCH_STUB
+	.long	pa_sl_flag_arch
+#endif
 #ifdef CONFIG_X86_64
 	.long	__KERNEL32_CS
 #endif
diff --git a/arch/x86/realmode/rm/trampoline_64.S b/arch/x86/realmode/rm/trampoline_64.S
index 24bb7598774e..634c4edb92e2 100644
--- a/arch/x86/realmode/rm/trampoline_64.S
+++ b/arch/x86/realmode/rm/trampoline_64.S
@@ -32,6 +32,7 @@
 #include <asm/segment.h>
 #include <asm/processor-flags.h>
 #include <asm/realmode.h>
+#include <asm/slaunch.h>
 #include "realmode.h"
 
 	.text
@@ -42,6 +43,14 @@ ENTRY(trampoline_start)
 	cli			# We should be safe anyway
 	wbinvd
 
+#ifdef CONFIG_SECURE_LAUNCH_STUB
+	# On AMD post SKINIT the GIF needs to be set
+	cmpl	$(SL_FLAG_ARCH_SKINIT), sl_flag_arch
+	jnz	1f
+	stgi
+1:
+#endif
+
 	LJMPW_RM(1f)
 1:
 	mov	%cs, %ax	# Code and data in the same place
diff --git a/arch/x86/realmode/rm/trampoline_common.S b/arch/x86/realmode/rm/trampoline_common.S
index 7c706772ab59..1764a9d11594 100644
--- a/arch/x86/realmode/rm/trampoline_common.S
+++ b/arch/x86/realmode/rm/trampoline_common.S
@@ -6,3 +6,7 @@ tr_idt: .fill 1, 6, 0
 	.bss
 	.balign	4
 GLOBAL(trampoline_status)	.space	4
+
+#ifdef CONFIG_SECURE_LAUNCH_STUB
+GLOBAL(sl_flag_arch)		.space	4
+#endif
-- 
2.13.6

