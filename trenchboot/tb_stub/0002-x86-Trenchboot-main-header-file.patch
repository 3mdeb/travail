From be5b4f7367e75c146c870e876144d458d088022c Mon Sep 17 00:00:00 2001
From: Ross Philipson <ross.philipson@oracle.com>
Date: Tue, 30 Oct 2018 14:44:38 -0400
Subject: [PATCH 2/8] x86: Trenchboot main header file

Signed-off-by: Ross Philipson <ross.philipson@oracle.com>
---
 arch/x86/include/asm/trenchboot.h | 159 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 159 insertions(+)
 create mode 100644 arch/x86/include/asm/trenchboot.h

diff --git a/arch/x86/include/asm/trenchboot.h b/arch/x86/include/asm/trenchboot.h
new file mode 100644
index 000000000000..1172ddf82108
--- /dev/null
+++ b/arch/x86/include/asm/trenchboot.h
@@ -0,0 +1,159 @@
+/*
+ * TODO license
+ */
+#ifndef _ASM_X86_TRENCHBOOT_H
+#define _ASM_X86_TRENCHBOOT_H
+
+#define __TB32_CS	0x0008
+#define __TB32_DS	0x0010
+
+#define CPU_AMD			1
+#define CPU_INTEL		2
+
+#define X86_GETSEC_SMCTRL	7
+#define X86_GETSEC_WAKEUP	8
+
+#define TXT_PUB_CONFIG_REGS_BASE	0xfed30000
+#define TXT_PRIV_CONFIG_REGS_BASE	0xfed20000
+#define TXTCR_STS			0x0000
+#define TXTCR_ESTS			0x0008
+#define TXTCR_ERRORCODE			0x0030
+#define TXTCR_MLE_JOIN			0x0290
+#define TXTCR_REG_HEAP_BASE		0x0300
+#define TXTCR_CMD_OPEN_LOCALITY1	0x0380
+#define TXTCR_CMD_CLOSE_LOCALITY1	0x0388
+#define TXTCR_CMD_OPEN_LOCALITY2	0x0390
+#define TXTCR_CMD_CLOSE_LOCALITY2	0x0398
+#define TXTCR_CMD_SECRETS		0x08e0
+#define TXTCR_E2STS			0x08f0
+
+#define TXT_CAP_RLP_WAKE_GETSEC		0x0000001
+#define TXT_CAP_RLP_WAKE_MONITOR	0x0000002
+
+#define TRENCHBOOT_INFO_OFFSET	0x0cc
+#define TB_FLAGS_OFFSET		0x4
+#define TB_XBI_OFFSET		0x8
+
+#define BP_CMD_LINE_PTR		0x228
+#define BP_CMDLINE_SIZE		0x238
+
+#define TB_FLAG_ACTIVE		0x00000001
+#define TB_FLAG_ARCH_SKINIT	0x00000002
+#define TB_FLAG_ARCH_TXT	0x00000004
+
+#ifndef __ASSEMBLY__
+
+struct txt_bios_data {
+	uint8_t		undef[36];
+} __attribute__((packed));
+
+struct txt_os_mle_data {
+	uint32_t	zero_page_addr;
+	/* TODO more to define later, may move to a common Trenchboot header */
+} __attribute__((packed));
+
+struct txt_os_sinit_data {
+	uint8_t		undef1[80];
+	uint32_t	capabilities;
+	uint8_t		undef2[16];
+} __attribute__((packed));
+
+struct txt_sinit_mle_data {
+	uint8_t		undef1[120];
+	uint32_t	rlp_wakeup_addr;
+	uint8_t		undef2[24];
+} __attribute__((packed));
+
+struct txt_mle_join {
+	uint32_t	gdt_limit;
+	uint32_t	gdt_base;
+	uint32_t	seg_sel;               /* cs (ds, es, ss are seg_sel+8) */
+	uint32_t	entry_point;           /* phys addr */
+} __attribute__((packed));
+
+static inline u64 txt_read_pub_reg(u32 reg)
+{
+	return *(volatile u64*)(unsigned long)(TXT_PUB_CONFIG_REGS_BASE + reg);
+}
+
+static inline u64 txt_read_priv_reg(u32 reg)
+{
+	return *(volatile u64*)(unsigned long)(TXT_PRIV_CONFIG_REGS_BASE + reg);
+}
+
+static inline void txt_write_pub_reg(u32 reg, u64 val)
+{
+	*(volatile u64*)(unsigned long)(TXT_PUB_CONFIG_REGS_BASE + reg) = val;
+}
+
+static inline void txt_write_priv_reg(u32 reg, u64 val)
+{
+	*(volatile u64*)(unsigned long)(TXT_PRIV_CONFIG_REGS_BASE + reg) = val;
+}
+
+static inline uint64_t txt_bios_data_size(void)
+{
+	void *heap = (void*)txt_read_pub_reg(TXTCR_REG_HEAP_BASE);
+	return *(uint64_t *)heap;
+}
+
+static inline struct txt_bios_data *txt_bios_data_start(void)
+{
+	uint8_t *heap = (void*)txt_read_pub_reg(TXTCR_REG_HEAP_BASE);
+	return (struct txt_bios_data*)(heap + sizeof(uint64_t));
+}
+
+static inline uint64_t txt_os_mle_data_size(void)
+{
+	uint8_t *heap = (void*)txt_read_pub_reg(TXTCR_REG_HEAP_BASE);
+	return *(uint64_t *)(heap + txt_bios_data_size());
+}
+
+static inline struct txt_os_mle_data *txt_os_mle_data_start(void)
+{
+	uint8_t *heap = (void*)txt_read_pub_reg(TXTCR_REG_HEAP_BASE);
+	return (struct txt_os_mle_data*)(heap + txt_bios_data_size() +
+					sizeof(uint64_t));
+}
+
+static inline uint64_t txt_os_sinit_data_size(void)
+{
+	uint8_t *heap = (void*)txt_read_pub_reg(TXTCR_REG_HEAP_BASE);
+	return *(uint64_t *)(heap + txt_bios_data_size() +
+				txt_os_mle_data_size());
+}
+
+static inline struct txt_os_sinit_data *txt_os_sinit_data_start(void)
+{
+	uint8_t *heap = (void*)txt_read_pub_reg(TXTCR_REG_HEAP_BASE);
+	return (struct txt_os_sinit_data*)(heap + txt_bios_data_size() +
+				txt_os_mle_data_size() + sizeof(uint64_t));
+}
+
+static inline uint64_t txt_sinit_mle_data_size(void)
+{
+	uint8_t *heap = (void*)txt_read_pub_reg(TXTCR_REG_HEAP_BASE);
+	return *(uint64_t *)(heap + txt_bios_data_size() +
+				txt_os_mle_data_size() +
+				txt_os_sinit_data_size());
+}
+
+static inline struct txt_sinit_mle_data *txt_sinit_mle_data_start(void)
+{
+	uint8_t *heap = (void*)txt_read_pub_reg(TXTCR_REG_HEAP_BASE);
+	return (struct txt_sinit_mle_data*)(heap + txt_bios_data_size() +
+				txt_os_mle_data_size() +
+				txt_os_sinit_data_size() +
+				sizeof(uint64_t));
+}
+
+static inline void txt_getsec_wakeup(void)
+{
+	__asm__ __volatile__ (".byte 0x0f,0x37\n" : : "a"(X86_GETSEC_WAKEUP));
+}
+
+void trenchboot_setup(void);
+
+#endif
+
+#endif /* _ASM_X86_TRENCHBOOT_H */
-- 
2.13.6

