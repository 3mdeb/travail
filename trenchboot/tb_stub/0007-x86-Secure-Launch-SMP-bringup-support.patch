From 05d2ae84a380204a522bab4c89ac8d07f2405c01 Mon Sep 17 00:00:00 2001
From: Ross Philipson <ross.philipson@oracle.com>
Date: Tue, 2 Oct 2018 14:41:49 -0400
Subject: [PATCH 7/8] x86: Secure Launch SMP bringup support

On Intel, the APs are left in a well documented state after TXT performs the
late launch. Specifically they cannot have #INIT asserted on them so a standard
startup via INIT/SIPI/SIPI cannot be performed. Instead the early SL stub code
parked the APs in a pause/jmp loop waiting for an NMI. The modified SMP boot
code is called for the Secure Launch case. The jump address for the RM piggy
entry point is fixed up in the jump where the APs are waiting and an NMI IPI
is sent to the AP. The AP vectors to the Secure Launch entry point in the RM
piggy which mimics what the real mode code would do then jumps the the standard
RM piggy protected mode entry point.

Signed-off-by: Ross Philipson <ross.philipson@oracle.com>
---
 arch/x86/include/asm/realmode.h      |  3 ++
 arch/x86/kernel/smpboot.c            | 82 ++++++++++++++++++++++++++++++++++++
 arch/x86/realmode/rm/header.S        |  3 ++
 arch/x86/realmode/rm/trampoline_64.S | 40 ++++++++++++++++++
 4 files changed, 128 insertions(+)

diff --git a/arch/x86/include/asm/realmode.h b/arch/x86/include/asm/realmode.h
index 63b3393bd98e..e2b71fb9dc85 100644
--- a/arch/x86/include/asm/realmode.h
+++ b/arch/x86/include/asm/realmode.h
@@ -35,6 +35,9 @@ struct real_mode_header {
 #ifdef CONFIG_X86_64
 	u32	machine_real_restart_seg;
 #endif
+#ifdef CONFIG_SECURE_LAUNCH_STUB
+	u32	sl_trampoline_start32;
+#endif
 };
 
 /* This must match data at trampoline_32/64.S */
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 6489067b78a4..fe506a00bf92 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -81,6 +81,7 @@
 #include <asm/cpu_device_id.h>
 #include <asm/spec-ctrl.h>
 #include <asm/hw_irq.h>
+#include <asm/slaunch.h>
 
 /* representing HT siblings of each logical CPU */
 DEFINE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_sibling_map);
@@ -954,6 +955,76 @@ void common_cpu_up(unsigned int cpu, struct task_struct *idle)
 #endif
 }
 
+#ifdef CONFIG_SECURE_LAUNCH_STUB
+static atomic_t first_ap_only;
+
+static int
+slaunch_fixup_jump_vector(void)
+{
+	void __iomem *txt_heap;
+	uint32_t ap_jmp_vector;
+	uint32_t *ap_jmp_ptr;
+	uint32_t ap_pm_entry_offset =
+			offsetof(struct txt_os_mle_data, ap_pm_entry);
+
+	if (atomic_read(&first_ap_only) == 1)
+		return 0;
+
+	atomic_set(&first_ap_only, 1);
+
+	txt_heap = txt_early_get_heap_table(TXT_OS_MLE_DATA_TABLE,
+					    ap_pm_entry_offset + 4);
+	if (unlikely(!txt_heap)) {
+		printk(KERN_ERR
+		       "Error SMP early_ioremap of TXT OS-SINIT heap\n");
+		return -1;
+	}
+
+	ap_jmp_vector = readl(txt_heap + ap_pm_entry_offset);
+	early_iounmap(txt_heap, ap_pm_entry_offset + 4);
+
+	ap_jmp_ptr = (uint32_t*)__va(ap_jmp_vector);
+	*ap_jmp_ptr = real_mode_header->sl_trampoline_start32;
+
+	return 0;
+}
+
+static int
+slaunch_wakeup_cpu_from_txt(int cpu, int apicid)
+{
+	unsigned long send_status = 0, accept_status = 0;
+
+	/* Only done once */
+	if (slaunch_fixup_jump_vector())
+		return -1;
+
+	/* Send NMI IPI to idling AP and wake it up */
+	apic_icr_write(APIC_DM_NMI, apicid);
+
+	if (init_udelay == 0)
+		udelay(10);
+	else
+		udelay(300);
+
+	send_status = safe_apic_wait_icr_idle();
+
+	if (init_udelay == 0)
+		udelay(10);
+	else
+		udelay(300);
+
+	accept_status = (apic_read(APIC_ESR) & 0xEF);
+
+	if (send_status)
+		pr_err("Secure Launch IPI never delivered???\n");
+	if (accept_status)
+		pr_err("Secure Launch IPI delivery error (%lx)\n",
+			accept_status);
+
+	return (send_status | accept_status);
+}
+#endif
+
 /*
  * NOTE - on most systems this is a PHYSICAL apic ID, but on multiquad
  * (ie clustered apic addressing mode), this is a LOGICAL apic ID.
@@ -1010,6 +1081,7 @@ static int do_boot_cpu(int apicid, int cpu, struct task_struct *idle,
 	cpumask_clear_cpu(cpu, cpu_initialized_mask);
 	smp_mb();
 
+#ifndef CONFIG_SECURE_LAUNCH_STUB
 	/*
 	 * Wake up a CPU in difference cases:
 	 * - Use the method in the APIC driver if it's defined
@@ -1021,6 +1093,16 @@ static int do_boot_cpu(int apicid, int cpu, struct task_struct *idle,
 	else
 		boot_error = wakeup_cpu_via_init_nmi(cpu, start_ip, apicid,
 						     cpu0_nmi_registered);
+#else
+	/*
+	 * On Intel, the startup is totally different.
+	 */
+	if (slaunch_get_flags() & SL_FLAG_ARCH_TXT)
+		boot_error = slaunch_wakeup_cpu_from_txt(cpu, apicid);
+	else
+		boot_error = wakeup_cpu_via_init_nmi(cpu, start_ip, apicid,
+						     cpu0_nmi_registered);
+#endif
 
 	if (!boot_error) {
 		/*
diff --git a/arch/x86/realmode/rm/header.S b/arch/x86/realmode/rm/header.S
index 30b0d30d861a..169396e3e64c 100644
--- a/arch/x86/realmode/rm/header.S
+++ b/arch/x86/realmode/rm/header.S
@@ -34,6 +34,9 @@ GLOBAL(real_mode_header)
 #ifdef CONFIG_X86_64
 	.long	__KERNEL32_CS
 #endif
+#ifdef CONFIG_SECURE_LAUNCH_STUB
+	.long	pa_sl_trampoline_start32
+#endif
 END(real_mode_header)
 
 	/* End signature, used to verify integrity */
diff --git a/arch/x86/realmode/rm/trampoline_64.S b/arch/x86/realmode/rm/trampoline_64.S
index 24bb7598774e..1b8075147949 100644
--- a/arch/x86/realmode/rm/trampoline_64.S
+++ b/arch/x86/realmode/rm/trampoline_64.S
@@ -32,6 +32,7 @@
 #include <asm/segment.h>
 #include <asm/processor-flags.h>
 #include <asm/realmode.h>
+#include <asm/slaunch.h>
 #include "realmode.h"
 
 	.text
@@ -86,6 +87,45 @@ no_longmode:
 	.section ".text32","ax"
 	.code32
 	.balign 4
+#ifdef CONFIG_SECURE_LAUNCH_STUB
+ENTRY(sl_trampoline_start32)
+	/*
+	 * The early secure launch stub AP wakeup code has taken care of all
+	 * the vagaries of launching out of TXT. This bit just mimics what the
+	 * 16b entry code does and jumps off to the real startup_32.
+	 */
+	cli
+	wbinvd
+
+	movl	$0xA5A5A5A5, trampoline_status
+	# write marker for master knows we're running
+
+	/*
+	 * This may seem a little odd but this is what %esp would have had in
+	 * it on the jmp from real mode because all real mode fixups were done
+	 * via the code segment.
+	 */
+	movl	$rm_stack_end, %esp
+
+	/*
+	 * The %ebx provided is not terribly useful since it is the physical
+	 * address of tb_trampoline_start and not the base of the image.
+	 * Use pa_real_mode_base, which is fixed up, to get a run time
+	 * base register to use for offsets to location that do not have
+	 * pa_ symbols.
+	 */
+	movl    $pa_real_mode_base, %ebx
+
+	lgdt    tr_gdt(%ebx)
+	lidt    tr_idt(%ebx)
+
+	movw	$__KERNEL_DS, %dx	# Data segment descriptor
+
+	/* Jump to where the 16b code would have jumped */
+	ljmpl	$__KERNEL32_CS, $pa_startup_32
+#endif
+
+	.balign 4
 ENTRY(startup_32)
 	movl	%edx, %ss
 	addl	$pa_real_mode_base, %esp
-- 
2.13.6

