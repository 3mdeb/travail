From 54dc57114fc95736e00fcfe5986c71aab53043f5 Mon Sep 17 00:00:00 2001
From: Ross Philipson <ross.philipson@oracle.com>
Date: Fri, 26 Oct 2018 15:53:24 -0400
Subject: [PATCH 5/8] x86: Trenchboot kernel early boot stub

Signed-off-by: Ross Philipson <ross.philipson@oracle.com>
---
 arch/x86/boot/compressed/Makefile  |   2 +-
 arch/x86/boot/compressed/head_64.S |  33 +++++++++
 arch/x86/boot/compressed/tb_main.c |  45 ++++++++++++
 arch/x86/boot/compressed/tb_stub.S | 147 +++++++++++++++++++++++++++++++++++++
 4 files changed, 226 insertions(+), 1 deletion(-)
 create mode 100644 arch/x86/boot/compressed/tb_main.c
 create mode 100644 arch/x86/boot/compressed/tb_stub.S

diff --git a/arch/x86/boot/compressed/Makefile b/arch/x86/boot/compressed/Makefile
index a3290c8..400ec15 100644
--- a/arch/x86/boot/compressed/Makefile
+++ b/arch/x86/boot/compressed/Makefile
@@ -90,7 +90,7 @@ vmlinux-objs-$(CONFIG_EFI_STUB) += $(obj)/eboot.o $(obj)/efi_stub_$(BITS).o \
 vmlinux-objs-$(CONFIG_EFI_MIXED) += $(obj)/efi_thunk_$(BITS).o
 
 vmlinux-objs-$(CONFIG_TRENCHBOOT_STUB) += $(obj)/early_sha1.o \
-	$(obj)/early_tpm.o
+	$(obj)/early_tpm.o $(obj)/tb_main.o $(obj)/tb_stub.o
 
 # The compressed kernel is built with -fPIC/-fPIE so that a boot loader
 # can place it anywhere in memory and it will still run. However, since
diff --git a/arch/x86/boot/compressed/head_64.S b/arch/x86/boot/compressed/head_64.S
index 6403789..f7bc3d7 100644
--- a/arch/x86/boot/compressed/head_64.S
+++ b/arch/x86/boot/compressed/head_64.S
@@ -248,6 +248,22 @@ ENTRY(efi32_stub_entry)
 ENDPROC(efi32_stub_entry)
 #endif
 
+#ifdef CONFIG_TRENCHBOOT_STUB
+ENTRY(tb_stub_entry)
+	/*
+	 * On entry, %ebx has the entry abs offset to tb_stub_entry. To
+	 * find the beginning of where we are loaded, sub off from the
+	 * beginning.
+	 */
+	movl	%ebx, %ebp
+	subl	$(tb_stub_entry - startup_32), %ebp
+
+	/* More room to work in tb_stub in the text section */
+	jmp	tb_stub
+
+ENDPROC(tb_stub_entry)
+#endif
+
 	.code64
 	.org 0x200
 ENTRY(startup_64)
@@ -520,6 +536,23 @@ relocated:
 	shrq	$3, %rcx
 	rep	stosq
 
+#ifdef CONFIG_TRENCHBOOT_STUB
+	/*
+	 * Have to do the final early TB stub work in 64b area.
+	 *
+	 * *********** NOTE ***********
+	 *
+	 * Several boot params get used before we get a chance to measure
+	 * them in this call. This is a known issue and we currently don't
+	 * have a solution. One solution might be to set them in the really
+	 * early TB stub asm code but that might not work well.
+	 */
+	pushq	%rsi
+	movq	%rsi, %rdi
+	callq	tb_main
+	popq	%rsi
+#endif
+
 /*
  * Do the extraction, and jump to the new kernel..
  */
diff --git a/arch/x86/boot/compressed/tb_main.c b/arch/x86/boot/compressed/tb_main.c
new file mode 100644
index 0000000..d8b34ba
--- /dev/null
+++ b/arch/x86/boot/compressed/tb_main.c
@@ -0,0 +1,45 @@
+#include <linux/init.h>
+#include <linux/linkage.h>
+#include <asm/segment.h>
+#include <asm/boot.h>
+#include <asm/msr.h>
+#include <asm/processor-flags.h>
+#include <asm/asm-offsets.h>
+#include <asm/sha1.h>
+#include <asm/tpm.h>
+#include <asm/bootparam.h>
+#include <asm/trenchboot.h>
+
+void tb_main(u8 *bootparams)
+{
+	struct sha1_state sctx = {0};
+	u8 sha1_hash[SHA1_DIGEST_SIZE];
+	u32 cmdline_len;
+	u64 cmdline_addr;
+	u32 tb_flags;
+	u8 extend_result[SHA1_DIGEST_SIZE];
+
+	memset(sha1_hash, 0, SHA1_DIGEST_SIZE);
+
+	tis_open(2);
+
+	/* Hash the zero page/boot params */
+	early_sha1_init(&sctx);
+	early_sha1_update(&sctx, bootparams, PAGE_SIZE);
+	early_sha1_finalize(&sctx);
+	early_sha1_finish(&sctx, &sha1_hash[0]);
+	tpm_extend(18, sha1_hash, extend_result);
+
+	memset(sha1_hash, 0, SHA1_DIGEST_SIZE);
+	cmdline_len = *((u32*)(bootparams + BP_CMDLINE_SIZE));
+	cmdline_addr = *((u32*)(bootparams + BP_CMD_LINE_PTR));
+
+	/* Hash the command line */
+	early_sha1_init(&sctx);
+	early_sha1_update(&sctx, (u8*)cmdline_addr, cmdline_len);
+	early_sha1_finalize(&sctx);
+	early_sha1_finish(&sctx, &sha1_hash[0]);
+	tpm_extend(18, sha1_hash, extend_result);
+
+	tis_close(2);
+}
diff --git a/arch/x86/boot/compressed/tb_stub.S b/arch/x86/boot/compressed/tb_stub.S
new file mode 100644
index 0000000..3e47b27
--- /dev/null
+++ b/arch/x86/boot/compressed/tb_stub.S
@@ -0,0 +1,147 @@
+	.code32
+	.text
+#include <linux/linkage.h>
+#include <asm/segment.h>
+#include <asm/msr.h>
+#include <asm/processor-flags.h>
+#include <asm/asm-offsets.h>
+#include <asm/bootparam.h>
+#include <asm/trenchboot.h>
+
+	.code32
+ENTRY(tb_stub)
+	cli
+	cld
+
+	/* On entry %ebp has the base address from head_64.S, load the stack */
+	leal	tb_stack_end(%ebp), %esp
+
+	/* TB flag indicates TB entry mode */
+	andl	$(TB_FLAG_ACTIVE), tb_flags(%ebp)
+
+	/* On entry, only %cs is known good */
+	addl	%ebp, (tb_gdt + 2)(%ebp)
+	lgdt	tb_gdt(%ebp)
+
+	movl	$(__TB32_DS), %eax
+	movw	%ax, %ds
+	movw	%ax, %es
+	movw	%ax, %fs
+	movw	%ax, %gs
+	movw	%ax, %ss
+
+	leal	.Ltb_cs(%ebp), %eax
+	pushl	$(__TB32_CS)
+	pushl	%eax
+	lret
+
+.Ltb_cs:
+	addl	$8, %esp
+
+	/* Before going any further, make sure this is the BSP */
+	movl	$(MSR_IA32_APICBASE), %ecx
+	rdmsr
+	testl	$(MSR_IA32_APICBASE_BSP), %eax
+	jnz	.Lbsp_ok
+	ud2
+
+.Lbsp_ok:
+	/* Assume CPU is AMD to start */
+	andl	$(CPU_AMD), %edi
+
+	/* Now see if it is Intel */
+	movl	$0x0, %eax
+	cpuid
+	cmpl	$0x756e6547, %ebx # GenuineIntel?
+	jnz	.Lcpu_check_done
+	cmpl	$0x49656e69, %edx
+	jnz	.Lcpu_check_done
+	cmpl	$0x6c65746e, %ecx
+	jnz	.Lcpu_check_done
+	andl	$(CPU_INTEL), %edi
+
+.Lcpu_check_done:
+	/* Now that we know what CPU it is, do vendor specific operations */
+	testl	$(CPU_AMD), %edi
+	jz	.Ldo_amd
+
+	/* Enable SMI with GETSET[SMCTRL] */
+	xorl	%ebx, %ebx
+	movl	$(X86_GETSEC_SMCTRL), %eax
+	.byte 	0x0f, 0x37 /* GETSEC opcode */
+
+	/* An IRET-to-self can be used to unmask NMIs which SENTER masked */
+	leal	.Lnmi_enabled(%ebp), %eax
+	pushfl
+	pushl	$(__TB32_CS)
+	pushl	%eax
+	iret
+
+.Lnmi_enabled:
+	addl	$12, %esp
+
+	/* On Intel, the zero page address is passed in the TXT heap */
+	movl	$(TXT_PUB_CONFIG_REGS_BASE), %eax /* TXT MMIO pub regs */
+	movl	TXTCR_HEAP_BASE(%eax), %ecx /* read size of BIOS data */
+	addl	%ecx, %eax /* skip over BIOS data to OS-MLE data */
+	movl	(%eax), %esi /* read zero page addr into %esi */
+
+	/* Clear the TXT error registers for a clean start of day */
+	movl	$(TXT_PRIV_CONFIG_REGS_BASE), %eax /* TXT MMIO priv regs */
+	movl	$0x0, TXTCR_ERRORCODE(%eax)
+	movl	$0xffffffff, TXTCR_ESTS(%eax)
+
+	andl	$(TB_FLAG_ARCH_TXT), tb_flags(%ebp)
+
+	jmp	.Lcpu_setup_done
+
+.Ldo_amd:
+	/*
+	 * Disable maskable interrups in EFLAGS then enable global interrupts
+	 * including SMI and NMI (GIF).
+	 */
+	cli
+	stgi
+
+	/* On AMD %esi is set up by the Landing Zone, just go on */
+	andl	$(TB_FLAG_ARCH_SKINIT), tb_flags(%ebp)
+
+.Lcpu_setup_done:
+	/*
+	 * Don't enable MCE at this point as TBOOT did. The kernel will enable
+	 * it on the BSP later when it is ready.
+	 */
+
+	/* Store flags in boot params for later use */
+	movl	%eax, (TRENCHBOOT_INFO_OFFSET + TB_FLAGS_OFFSET)(%esi)
+
+	/* Don't want the kernel keeping any segment from the TB stub */
+	andb	$~(KEEP_SEGMENTS), BP_loadflags(%esi)
+
+	/* Done, jump to normal 32b pm entry */
+	jmp	startup_32
+ENDPROC(tb_stub)
+
+	.data
+	.balign 16
+tb_gdt:
+	.word	tb_gdt_end - tb_gdt - 1
+	.long	tb_gdt
+	.word	0
+	.quad	0x00cf9a000000ffff	/* __TB32_CS */
+	.quad	0x00cf92000000ffff	/* __TB32_DS */
+tb_gdt_end:
+
+	/*
+	 * Temporary storage for flags until they can be loaded into
+	 * boot params making them available to the real kernel.
+	 */
+	.balign 4
+tb_flags:
+	.long	0
+
+	/* Small stack to work with */
+	.balign 4
+tb_stack:
+	.fill 32, 1, 0
+tb_stack_end:
-- 
2.1.4

