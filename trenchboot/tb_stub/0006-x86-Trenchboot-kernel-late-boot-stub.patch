From ea01b65c10f0ec337094e90929a523f7784fad3f Mon Sep 17 00:00:00 2001
From: Ross Philipson <ross.philipson@oracle.com>
Date: Fri, 26 Oct 2018 16:13:03 -0400
Subject: [PATCH 6/8] x86: Trenchboot kernel late boot stub

Signed-off-by: Ross Philipson <ross.philipson@oracle.com>
---
 arch/x86/kernel/Makefile     |  1 +
 arch/x86/kernel/setup.c      |  5 ++++
 arch/x86/kernel/trenchboot.c | 64 ++++++++++++++++++++++++++++++++++++++++++++
 drivers/iommu/dmar.c         |  5 ++++
 4 files changed, 75 insertions(+)
 create mode 100644 arch/x86/kernel/trenchboot.c

diff --git a/arch/x86/kernel/Makefile b/arch/x86/kernel/Makefile
index 8824d01c0c35..45d567867ff2 100644
--- a/arch/x86/kernel/Makefile
+++ b/arch/x86/kernel/Makefile
@@ -70,6 +70,7 @@ obj-$(CONFIG_X86_32)		+= tls.o
 obj-$(CONFIG_IA32_EMULATION)	+= tls.o
 obj-y				+= step.o
 obj-$(CONFIG_INTEL_TXT)		+= tboot.o
+obj-$(CONFIG_TRENCHBOOT_STUB)	+= trenchboot.o
 obj-$(CONFIG_ISA_DMA_API)	+= i8237.o
 obj-$(CONFIG_STACKTRACE)	+= stacktrace.o
 obj-y				+= cpu/
diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c
index b4866badb235..9feda4d81677 100644
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@ -117,6 +117,7 @@
 #include <asm/microcode.h>
 #include <asm/kaslr.h>
 #include <asm/unwind.h>
+#include <asm/trenchboot.h>
 
 /*
  * max_low_pfn_mapped: highest direct mapped pfn under 4GB
@@ -1218,6 +1219,10 @@ void __init setup_arch(char **cmdline_p)
 
 	tboot_probe();
 
+#ifdef CONFIG_TRENCHBOOT_STUB
+	tb_setup();
+#endif
+
 	map_vsyscall();
 
 	generic_apic_probe();
diff --git a/arch/x86/kernel/trenchboot.c b/arch/x86/kernel/trenchboot.c
new file mode 100644
index 000000000000..048d958901f3
--- /dev/null
+++ b/arch/x86/kernel/trenchboot.c
@@ -0,0 +1,64 @@
+#include <linux/init.h>
+#include <linux/linkage.h>
+#include <asm/segment.h>
+#include <asm/boot.h>
+#include <asm/msr.h>
+#include <asm/processor-flags.h>
+#include <asm/asm-offsets.h>
+#include <asm/bootparam.h>
+#include <asm/setup.h>
+#include <asm/trenchboot.h>
+
+struct acpi_table_header *tb_get_dmar_table(struct acpi_table_header *dmar)
+{
+	void __iomem *heap;
+	void __iomem *sinit_mle_data;
+	u32 dmar_offset;
+
+	heap = txt_get_heap();
+	if (unlikely(!heap))
+	{
+		/* TODO add TPM infor log entry */
+		return dmar;
+	}
+
+	sinit_mle_data = txt_sinit_mle_data_start(heap);
+	dmar_offset = readl(sinit_mle_data + TXT_SINIT_MLE_DMAR_TABLE_OFFSET);
+
+	/*
+	 * Note this is not really the way things should be done with
+	 * ioremapped memory but the simplest thing to do is to leave the
+	 * heap mapped and return a pointer to the DMAR.
+	 */
+
+	return (struct acpi_table_header*)(sinit_mle_data + dmar_offset);
+}
+
+void tb_setup_intel(void)
+{
+	/* On Intel, have to handle TPM localities via TXT */
+	txt_write_reg(TXTCR_CMD_SECRETS, 0x1, 0);
+	(void)txt_read_reg(TXTCR_E2STS, 0);
+	txt_write_reg(TXTCR_CMD_OPEN_LOCALITY1, 0x1, 0);
+	(void)txt_read_reg(TXTCR_E2STS, 0);
+
+	/* TODO validate the PMRs */
+}
+
+void tb_setup_amd(void)
+{
+	/* TODO validate the DEV tables and devices */
+}
+
+void tb_setup(void)
+{
+	BUG_ON(!(boot_params.trenchboot_info.tb_flags & TB_FLAG_ACTIVE));
+
+	if (boot_params.trenchboot_info.tb_flags & TB_FLAG_ARCH_TXT)
+		tb_setup_intel();
+	else if (boot_params.trenchboot_info.tb_flags & TB_FLAG_ARCH_SKINIT)
+		tb_setup_amd();
+	else
+		BUG();
+
+}
diff --git a/drivers/iommu/dmar.c b/drivers/iommu/dmar.c
index d9c748b6f9e4..723efdf04b49 100644
--- a/drivers/iommu/dmar.c
+++ b/drivers/iommu/dmar.c
@@ -41,6 +41,7 @@
 #include <linux/iommu.h>
 #include <asm/irq_remapping.h>
 #include <asm/iommu_table.h>
+#include <asm/trenchboot.h>
 
 #include "irq_remapping.h"
 
@@ -632,7 +633,11 @@ parse_dmar_table(void)
 	 * ACPI tables may not be DMA protected by tboot, so use DMAR copy
 	 * SINIT saved in SinitMleData in TXT heap (which is DMA protected)
 	 */
+#ifdef CONFIG_TRENCHBOOT_STUB
+	dmar_tbl = tb_get_dmar_table(dmar_tbl);
+#else
 	dmar_tbl = tboot_get_dmar_table(dmar_tbl);
+#endif
 
 	dmar = (struct acpi_table_dmar *)dmar_tbl;
 	if (!dmar)
-- 
2.11.0

