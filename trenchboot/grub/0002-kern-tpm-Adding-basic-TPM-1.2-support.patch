From 3b65bf6a96ce6a47cccca03b4ae4abdefae9940e Mon Sep 17 00:00:00 2001
From: Ross Philipson <ross.philipson@oracle.com>
Date: Sat, 1 Dec 2018 12:27:12 -0500
Subject: [PATCH 2/3] slaunch: Add secure launch base framework

Signed-off-by: Ross Philipson <ross.philipson@oracle.com>
---
 grub-core/Makefile.am                  |   1 +
 grub-core/Makefile.core.def            |   8 +++
 grub-core/loader/i386/linux.c          |  18 ++++++
 grub-core/loader/i386/slaunch.c        | 107 +++++++++++++++++++++++++++++++++
 grub-core/loader/i386/slaunch_skinit.c |  32 ++++++++++
 grub-core/loader/i386/slaunch_txt.c    |  32 ++++++++++
 include/grub/slaunch.h                 |  76 +++++++++++++++++++++++
 7 files changed, 274 insertions(+)
 create mode 100644 grub-core/loader/i386/slaunch.c
 create mode 100644 grub-core/loader/i386/slaunch_skinit.c
 create mode 100644 grub-core/loader/i386/slaunch_txt.c
 create mode 100644 include/grub/slaunch.h

diff --git a/grub-core/Makefile.am b/grub-core/Makefile.am
index 5a8b3b8cc..7d8508910 100644
--- a/grub-core/Makefile.am
+++ b/grub-core/Makefile.am
@@ -100,6 +100,7 @@ KERNEL_HEADER_FILES += $(top_builddir)/include/grub/machine/pxe.h
 KERNEL_HEADER_FILES += $(top_builddir)/include/grub/machine/int.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/i386/tsc.h
 KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/tpm.h
+KERNEL_HEADER_FILES += $(top_srcdir)/include/grub/slaunch.h
 endif
 
 if COND_i386_efi
diff --git a/grub-core/Makefile.core.def b/grub-core/Makefile.core.def
index d7f515c85..e5ee48ebc 100644
--- a/grub-core/Makefile.core.def
+++ b/grub-core/Makefile.core.def
@@ -1730,6 +1730,14 @@ module = {
 };
 
 module = {
+  name = slaunch;
+  x86 = loader/i386/slaunch.c;
+  x86 = loader/i386/slaunch_txt.c;
+  x86 = loader/i386/slaunch_skinit.c;
+  enable = x86;
+};
+
+module = {
   name = fdt;
   efi = loader/efi/fdt.c;
   common = lib/fdt.c;
diff --git a/grub-core/loader/i386/linux.c b/grub-core/loader/i386/linux.c
index c408b10d8..95db949f1 100644
--- a/grub-core/loader/i386/linux.c
+++ b/grub-core/loader/i386/linux.c
@@ -34,6 +34,7 @@
 #include <grub/i386/relocator.h>
 #include <grub/i18n.h>
 #include <grub/lib/cmdline.h>
+#include <grub/slaunch.h>
 #include <grub/linux.h>
 
 GRUB_MOD_LICENSE ("GPLv3+");
@@ -79,6 +80,8 @@ static grub_efi_uintn_t efi_mmap_size;
 #else
 static const grub_size_t efi_mmap_size = 0;
 #endif
+static grub_err_t (*grub_slaunch_func) (struct grub_slaunch_params*) = NULL;
+static struct grub_slaunch_params slparams;
 
 /* FIXME */
 #if 0
@@ -95,6 +98,12 @@ static struct idt_descriptor idt_desc =
   };
 #endif
 
+void
+grub_linux_slaunch_set (grub_err_t (*sfunc) (struct grub_slaunch_params*))
+{
+  grub_slaunch_func = sfunc;
+}
+
 static inline grub_size_t
 page_align (grub_size_t size)
 {
@@ -611,6 +620,15 @@ grub_linux_boot (void)
   }
 #endif
 
+  /* If a secondary loader was set for secure launch, call it here.  */
+  if (grub_slaunch_func)
+    {
+      slparams.params = ctx.params;
+      slparams.real_mode_target = ctx.real_mode_target;
+      slparams.prot_mode_target = prot_mode_target;
+      return grub_slaunch_func(&slparams);
+    }
+
   /* FIXME.  */
   /*  asm volatile ("lidt %0" : : "m" (idt_desc)); */
   state.ebp = state.edi = state.ebx = 0;
diff --git a/grub-core/loader/i386/slaunch.c b/grub-core/loader/i386/slaunch.c
new file mode 100644
index 000000000..39220f078
--- /dev/null
+++ b/grub-core/loader/i386/slaunch.c
@@ -0,0 +1,107 @@
+/*
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ */
+#include <grub/loader.h>
+#include <grub/memory.h>
+#include <grub/normal.h>
+#include <grub/err.h>
+#include <grub/misc.h>
+#include <grub/types.h>
+#include <grub/dl.h>
+#include <grub/tpm.h>
+#include <grub/i386/cpuid.h>
+#include <grub/i386/msr.h>
+#include <grub/slaunch.h>
+
+static grub_dl_t my_mod;
+
+static grub_err_t
+grub_cmd_slaunch (grub_command_t cmd __attribute__ ((unused)),
+                int argc, char *argv[])
+{
+  grub_uint32_t manufacturer[3];
+  grub_uint32_t eax, edx, ebx, ecx;
+  grub_uint64_t msr_value;
+
+  if (argc == 0)
+    return grub_error (GRUB_ERR_BAD_ARGUMENT, N_("argument expected"));
+
+  /* Should be executing on the BSP  */
+  msr_value = grub_rdmsr(GRUB_MSR_X86_APICBASE);
+  if (! (msr_value & GRUB_MSR_X86_APICBASE_BSP))
+    return grub_error (GRUB_ERR_BAD_DEVICE, N_("secure launch must run on BSP"));
+
+  /* Is the an active TPM with a valid vendor ID */
+  if (! grub_tis_init ())
+    return grub_error (GRUB_ERR_BAD_DEVICE, N_("no active TPM found on platform"));
+
+  if (! grub_cpu_is_cpuid_supported ())
+    return grub_error (GRUB_ERR_UNKNOWN_DEVICE, N_("CPUID not supported"));
+
+  grub_cpuid (0, eax, manufacturer[0], manufacturer[2], manufacturer[1]);
+
+  if (grub_memcmp (argv[0], "txt", 3) == 0)
+    {
+      if (grub_memcmp (manufacturer, "GenuineIntel", 12) != 0)
+        return grub_error (GRUB_ERR_UNKNOWN_DEVICE, N_("Intel platform required for TXT"));
+
+      grub_cpuid(GRUB_X86_CPUID_FEATURES, eax, ebx, ecx, edx);
+      if (! (ecx & GRUB_VMX_CPUID_FEATURE) || ! (ecx & GRUB_SMX_CPUID_FEATURE) )
+        return grub_error (GRUB_ERR_BAD_DEVICE,
+			   N_("CPU does not support Intel TXT"));
+
+      msr_value = grub_rdmsr(GRUB_MSR_X86_FEATURE_CONTROL);
+      if (! (msr_value & GRUB_MSR_X86_ENABLE_VMX_IN_SMX))
+        return grub_error (GRUB_ERR_BAD_DEVICE,
+			   N_("Intel TXT is not enabled"));
+
+      grub_linux_slaunch_set(grub_slaunch_boot_txt);
+    }
+  else if (grub_memcmp (argv[0], "skinit", 6) == 0)
+    {
+      if (grub_memcmp (manufacturer, "AuthenticAMD", 12) != 0)
+        return grub_error (GRUB_ERR_UNKNOWN_DEVICE, N_("AMD platform required for SKINIT"));
+
+      grub_cpuid(GRUB_AMD_CPUID_FEATURES, eax, ebx, ecx, edx);
+      if (! (ecx & GRUB_SVM_CPUID_FEATURE) )
+        return grub_error (GRUB_ERR_BAD_DEVICE, N_("CPU does not support AMD SVM"));
+
+      /* Check whether SVM feature is disabled in BIOS */
+      msr_value = grub_rdmsr(GRUB_MSR_AMD64_VM_CR);
+      if (msr_value & GRUB_MSR_SVM_VM_CR_SVM_DISABLE)
+        return grub_error(GRUB_ERR_BAD_DEVICE, "BIOS has AMD SVM disabled");
+
+      grub_linux_slaunch_set(grub_slaunch_boot_skinit);
+    }
+  else
+    return grub_error (GRUB_ERR_BAD_ARGUMENT, N_("invalid argument"));
+
+  return GRUB_ERR_NONE;
+}
+
+static grub_command_t cmd;
+
+GRUB_MOD_INIT(slaunch)
+{
+  cmd = grub_register_command ("slaunch", grub_cmd_slaunch,
+                               0, N_("Launch Secure Loader"));
+  my_mod = mod;
+}
+
+GRUB_MOD_FINI(slaunch)
+{
+    grub_unregister_command (cmd);
+}
+
+GRUB_MOD_LICENSE("GPLv3+");
diff --git a/grub-core/loader/i386/slaunch_skinit.c b/grub-core/loader/i386/slaunch_skinit.c
new file mode 100644
index 000000000..449407054
--- /dev/null
+++ b/grub-core/loader/i386/slaunch_skinit.c
@@ -0,0 +1,32 @@
+/*
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ */
+#include <grub/loader.h>
+#include <grub/memory.h>
+#include <grub/normal.h>
+#include <grub/err.h>
+#include <grub/misc.h>
+#include <grub/types.h>
+#include <grub/dl.h>
+#include <grub/slaunch.h>
+
+grub_err_t
+grub_slaunch_boot_skinit (struct grub_slaunch_params *slparams)
+{
+  slparams = slparams;
+
+  return GRUB_ERR_NONE;
+}
+
+GRUB_MOD_LICENSE("GPLv3+");
diff --git a/grub-core/loader/i386/slaunch_txt.c b/grub-core/loader/i386/slaunch_txt.c
new file mode 100644
index 000000000..95525df0f
--- /dev/null
+++ b/grub-core/loader/i386/slaunch_txt.c
@@ -0,0 +1,32 @@
+/*
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ */
+#include <grub/loader.h>
+#include <grub/memory.h>
+#include <grub/normal.h>
+#include <grub/err.h>
+#include <grub/misc.h>
+#include <grub/types.h>
+#include <grub/dl.h>
+#include <grub/slaunch.h>
+
+grub_err_t
+grub_slaunch_boot_txt (struct grub_slaunch_params *slparams)
+{
+  slparams = slparams;
+
+  return GRUB_ERR_NONE;
+}
+
+GRUB_MOD_LICENSE("GPLv3+");
diff --git a/include/grub/slaunch.h b/include/grub/slaunch.h
new file mode 100644
index 000000000..87ffe9e3b
--- /dev/null
+++ b/include/grub/slaunch.h
@@ -0,0 +1,76 @@
+/*
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+#ifndef GRUB_SLAUNCH_H
+#define GRUB_SLAUNCH_H 1
+
+#include <grub/types.h>
+#include <grub/i386/linux.h>
+
+/* General  */
+#define GRUB_X86_CPUID_VENDOR	0x00000000
+#define GRUB_X86_CPUID_FEATURES	0x00000001
+
+/* Intel  */
+#define GRUB_VMX_CPUID_FEATURE	(1<<5)
+#define GRUB_SMX_CPUID_FEATURE	(1<<6)
+
+/* AMD  */
+#define GRUB_AMD_CPUID_FEATURES	0x80000001
+#define GRUB_SVM_CPUID_FEATURE	(1<<2)
+#define GRUB_AMD_CPUID_FUNC	0x8000000a
+
+struct grub_slaunch_params
+{
+  struct linux_kernel_params *params;
+  grub_addr_t real_mode_target;
+  grub_addr_t prot_mode_target;
+};
+
+static inline grub_uint64_t
+grub_rdmsr(grub_uint32_t msr)
+{
+  grub_uint64_t val = 0;
+
+#ifdef __x86_64__
+  asm volatile("rdmsr" : "=A" (val) : "c" (msr));
+#else
+  grub_uint32_t low, high;
+  asm volatile("rdmsr"  : "=a" (low), "=d" (high) : "c" (msr));
+  val = ((low) | (grub_uint64_t)(high) << 32);
+#endif
+
+  return val;
+}
+
+static inline void
+grub_wrmsr(grub_uint32_t msr, grub_uint64_t val)
+{
+#ifdef __x86_64__
+  asm volatile("wrmsr" : "=A" (val) : "c" (msr));
+#else
+  grub_uint32_t low, high;
+  high = (grub_uint32_t) ((val & 0xFFFFFFFF00000000LL) >> 32);
+  low = (grub_uint32_t) (val & 0xFFFFFFFFLL);
+  asm volatile("wrmsr"  : "=a" (low), "=d" (high) : "c" (msr));
+#endif
+}
+
+grub_err_t grub_slaunch_boot_txt (struct grub_slaunch_params *slparams);
+grub_err_t grub_slaunch_boot_skinit (struct grub_slaunch_params *slparams);
+
+void grub_linux_slaunch_set (grub_err_t (*sfunc) (struct grub_slaunch_params*));
+
+#endif
-- 
2.13.6

